int minimal_residual_msr_matrix(int n, double* A, int* I, double* b, double* x, double* r, double* u, double* v, double eps, int maxit, int p, int k);
int minimal_residual_msr_matrix_full(int n, double* A, int* I, double* b, double* x, double* r, double* u, double* v, double eps, int maxit, int maxsteps, int p, int k);
void thread_rows(int n , int p, int k, int &i1, int &i2);
double scalar_product(int n, double* x, double* y, int p, int k);
void mult_sub_vector(int n, double* x, double* y, double t, int p, int k);
void apply_preconditioner_msr_matrix(int n, double* A, int* /*I*/, double* v, double* r, int p, int k);
void multiply_msr_matrix_vector(int n, double* A, int* I, double* x, double* y, int p, int k);
void ij2l(int nx, int /*ny*/, int i, int j, int &l);
void l2ij(int nx, int /*ny*/, int &i, int &j, int l);
int get_len_msr(int nx, int ny);
int get_off_diag(int nx, int ny, int i, int j, int* I_ij = nullptr); 
int get_len_msr_off_diag(int nx, int ny);
int allocate_msr_matrix(int nx, int ny, double** p_A, int** p_I);
void fill_I(int nx, int ny, int* I);
void fill_A_ij(int nx, int ny, double hx, double hy, int i, int j, double* A_diag, double* A_off_diag);
void fill_A(int nx, int ny, double hx, double hy, int* I, double* A, int p, int k);
double F_IJ(int nx, int ny, double hx, double hy, double x0, double y0, int i, int j, double (*f)(double, double));
void fill_B(int nx, int ny, double hx, double hy, double x0, double y0, double* b, double (*f)(double, double), int p, int k);
double r1(int nx, int ny, double hx, double hy, double x0, double y0, double* x, double (*f)(double, double), int p, int k);
double r2(int nx, int ny, double hx, double hy, double x0, double y0, double* x, double (*f)(double, double), int p, int k);
double r3(int nx, int ny, double hx, double hy, double x0, double y0, double* x, double (*f)(double, double), int p, int k);
double r4(int nx, int ny, double hx, double hy, double x0, double y0, double* x, double (*f)(double, double), int p, int k);
